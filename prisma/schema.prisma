generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int            @id @default(autoincrement())
  createdAt        DateTime       @default(now()) @map("created_at")
  upldatedAt       DateTime       @updatedAt @map("updated_at")
  email            String         @unique()
  password         String
  name             String
  isVerified       Boolean        @default(false) @map("is_verified")
  subscribersCount Int            @map("subscribers_count")
  description      String
  avatarPath       String         @map("avatar_path")
  videos           Video[]
  subscribers      Subscription[] @relation("UserSubscriptions")
  subscriptions    Subscription[] @relation("UserSubscribers")

  Comments Comments[]
}

model Video {
  id            Int        @id @default(autoincrement())
  createdAt     DateTime   @default(now()) @map("created_at")
  upldatedAt    DateTime   @updatedAt @map("updated_at")
  User          User?      @relation(fields: [userId], references: [id])
  userId        Int?       @map("user_id")
  name          String
  isPublic      Boolean    @map("is_public")
  views         Int
  likes         Int
  duration      Int
  desscription  String
  videoPath     String     @map("video_path")
  thumbnailPath String     @map("thumbnail_path")
  comments      Comments[]
}

model Subscription {
  id          Int  @id @default(autoincrement())
  fromUser    User @relation("UserSubscriptions", fields: [fromUserId], references: [id])
  fromUserId  Int  @map("from_user_id")
  toChannel   User @relation("UserSubscribers", fields: [toChannelId], references: [id])
  toChannelId Int  @map("to_channel_id")
}

model Comments {
  id      Int    @id @default(autoincrement())
  message String
  user    User   @relation(fields: [userId], references: [id])
  userId  Int    @map("user_id")
  Video   Video? @relation(fields: [videoId], references: [id])
  videoId Int?   @map("video_id")
}
